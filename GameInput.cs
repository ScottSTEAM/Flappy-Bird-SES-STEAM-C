//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""BirdMovement"",
            ""id"": ""cd56f05d-a0ee-42ac-b204-a4350d5f9ae4"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""204987ca-fc37-4618-8e4e-79371bd19925"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c57a0ef-8e48-4618-8b29-0a67988147c4"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6edc8ffb-2c78-43dc-b83d-0ae5ab57b362"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BirdMovement
        m_BirdMovement = asset.FindActionMap("BirdMovement", throwIfNotFound: true);
        m_BirdMovement_Tap = m_BirdMovement.FindAction("Tap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BirdMovement
    private readonly InputActionMap m_BirdMovement;
    private List<IBirdMovementActions> m_BirdMovementActionsCallbackInterfaces = new List<IBirdMovementActions>();
    private readonly InputAction m_BirdMovement_Tap;
    public struct BirdMovementActions
    {
        private @GameInput m_Wrapper;
        public BirdMovementActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_BirdMovement_Tap;
        public InputActionMap Get() { return m_Wrapper.m_BirdMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BirdMovementActions set) { return set.Get(); }
        public void AddCallbacks(IBirdMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_BirdMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BirdMovementActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
        }

        private void UnregisterCallbacks(IBirdMovementActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
        }

        public void RemoveCallbacks(IBirdMovementActions instance)
        {
            if (m_Wrapper.m_BirdMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBirdMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_BirdMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BirdMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BirdMovementActions @BirdMovement => new BirdMovementActions(this);
    public interface IBirdMovementActions
    {
        void OnTap(InputAction.CallbackContext context);
    }
}
